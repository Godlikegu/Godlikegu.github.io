<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OO-U2-hw1</title>
      <link href="/2023/03/23/OO-U2-hw1/"/>
      <url>/2023/03/23/OO-U2-hw1/</url>
      
        <content type="html"><![CDATA[<h1 id="java多线程设计分析"><a href="#java多线程设计分析" class="headerlink" title="java多线程设计分析"></a>java多线程设计分析</h1><p>初学多线程，在还没有弄明白线程之间为什么要上锁以保证线程安全的时候，容易陷入死锁或者非安全访问的泥沼，本文致力于通过简单的例子说明基于<strong>生产者消费者</strong>模式的多线程协调设计。语文水平有限，语言十分啰嗦，难受的话请跳到最后的总结。</p><h2 id="PPT中的交通管理样例"><a href="#PPT中的交通管理样例" class="headerlink" title="PPT中的交通管理样例"></a>PPT中的交通管理样例</h2><p><img src="/2023/03/23/OO-U2-hw1/p1.png" alt="p1"><br><strong>样例解释</strong>：<br>整个城市可以用一张地图<strong>map</strong>来描述; 地图<strong>map</strong>上有很多道路<strong>road</strong>; 每条道路<strong>road</strong>上有多个车道<strong>lane</strong>; 对于每个车道<strong>lane</strong>，我们都置有一个摄像头<strong>sensor</strong>。<br>摄像头是识别通过车辆的检测器，可以进行对经过的车辆进行数量的统计,并把数据汇报给某个记录数据的单元。</p><p>我们先对<strong>观察者模式</strong>进行一些了解<br>参考出处：<code>作者：虫琏 ； 链接：https://juejin.cn/post/7059310917820874783</code><br><strong>Subject（目标）</strong><br>目标指被观察的对象。在目标中定义了一个观察者集合,它可以存储任意数量的观察者对象,它提供一个接口来增加和删除观察者对象,同时它定义了的通知方法notifyO，告诉观察者状态的变化或具体内容。目标类可以是接口,也可以是抽象类或实现类。</p><p><strong>ConcreteSubject(具体目标)</strong><br>具体目标是目标类的子类,通常它包含经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知。同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。</p><p><strong>Observer(观察者)</strong><br>观察者将对观察目标的改变做出反应，观察者一般定义为接口,该接口声明了更新数据的方法update(),因此又称为抽象观察者。</p><p><strong>ConcreteObserver(具体观察者)</strong><br>在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者Observer中定义的update()方法。通常在实现时,可以调用具体目标类的attach()方法将自己添加到目标类的观察者集合中或通过detach()方法将自己从目标类的观察者集合中删除。</p><p>大致关系的类图如下，我们可以把图分为左右两部分，concrete部分实现的是上层的抽象接口，保证可扩展性。左边的每个subject可以被多个右边的observer所观测，右边的observer可以通过getState方法获取左侧subject的状态信息。</p><p>在关系中不难看出，Subject对Observer的关系是一对多或者一对一的，使用了observers容器来储存，中间方框内的遍历使用update()方法就是告诉Subject的每一个Observer状态的变更情况。<br><img src="/2023/03/23/OO-U2-hw1/p2.png" alt="p2"></p><p><br><br><br>课程组也给了我们一个初步的类图和亿些代码以及文字提示，先从类图开始研究一番<br><img src="/2023/03/23/OO-U2-hw1/p3.png" alt="p3"><br><br><br><br><img src="/2023/03/23/OO-U2-hw1/p4.png" alt="p4"><br>根据之前所描述的观察者模式，不难看出，这里的被观测对象是TrafficSensor, 观察者是TrafficController。从我们的生活经验上来看，来往的车辆是我们的观察对象，但是在代码中我们无法直接模拟车辆，因此我们观察的对象被封装为摄像头反馈的车辆信息。</p><p>在图中我们发现Subject对Observer是一对一的关系。每一个TrafficSensor存有对应的TrafficController，并且有自己的车道编号laneNo。当TrafficSensor检测到车辆通过时，就会调用TrafficController的vehiclePassed()方法，这里的vehiclePassed方法也就对应了之前我们提到的该模式下一般性的Update()方法。每一个TrafficSensor都是一个独立的线程，将信息提供给Controller。TrafficSensor代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrafficSensor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> laneNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TrafficObserver</span> obs<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrafficSensor</span><span class="token punctuation">(</span><span class="token keyword">int</span> lane<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        laneNo <span class="token operator">=</span> lane<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObserver</span><span class="token punctuation">(</span><span class="token class-name">TrafficObserver</span> obs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obs <span class="token operator">=</span> obs<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            obs<span class="token punctuation">.</span><span class="token function">vehiclePassed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注：这里模拟得十分僵硬，相当于每隔0.1s就会来一辆车，有要求的同学可以改成Math.random()*1000等具有随机性的值，使得程序更加贴近真实。</code></p><p>我们接着分析TrafficController,  其属性包括存储观察信息的int vehicleCount和道路编号int RoadNo，以及系统读取的周期数int cycle。在除了构造方法和vehiclePassed方法以及单纯获取RoadNo的readRoad方法之外，该方法还有getAndClearCount()方法，从名字可以发现，该方法会清空vehicleCount中的数值，并且返回之前累积的值。我们不难发现，这个观察者类其实是一种容器，容器内含有两种方法，一种是往里累加信息的方法，一种是重置并返回（取出）容器内信息的方法，且这两种方法都是供外界调用。加上PPT上醒目的<strong>生产者-消费者</strong>的线程交互模式，我们得以了解到，除了观察者和被观查者的角度分析外，TrafficSenor是生产者，TrafficController是“托盘”，调用vehicleCount方法的对象是消费者。</p><p>附上TrafficController代码和TrafficObserver接口代码(cycle属性没放里面)，作为公共资源，对vehicleCount访问或者修改的代码需要上锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TrafficObserver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vehiclePassed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrafficController</span> <span class="token keyword">implements</span> <span class="token class-name">TrafficObserver</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vehicleCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> roadNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrafficController</span><span class="token punctuation">(</span><span class="token keyword">int</span> road<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        roadNo <span class="token operator">=</span> road<span class="token punctuation">;</span>        vehicleCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">vehiclePassed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//all sensors will call</span>        vehicleCount <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getAndClearCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//only the reporter will call</span>        cycle <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_count <span class="token operator">=</span> vehicleCount<span class="token punctuation">;</span>        vehicleCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vehicle passed:"</span> <span class="token operator">+</span> cur_count <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"in road:"</span> <span class="token operator">+</span> roadNo <span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span> <span class="token string">"for the cycle: "</span> <span class="token operator">+</span> cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cur_count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> roadNo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br>通过第二个类图和课程组提供的代码我们不难发现，调用getAndClearCount方法的正是TrafficReporter类。通过属性，我们发现每个TrafficReporter类对应了一个TrafficController，”消费“其中的信息。顾名思义，TrafficReporter类肯定要向某个单位汇报目前所得的信息，这又是一个独立的线程。至此，我们已经通过一个基本的生产者-消费者模型完成了信息链的初步传递。如下图所示，1条road中的n个lanes对应n个Sensor，1个Controller和一个Reporter。Sensor将信息存在Controller里面，Report读取并清空信息反馈给map。</p><p><img src="/2023/03/23/OO-U2-hw1/p5.png" alt="p5"></p><p>代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrafficReporter</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrafficController</span> controller<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TrafficMap</span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> period<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrafficReporter</span><span class="token punctuation">(</span><span class="token class-name">TrafficController</span> trc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        period <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        controller <span class="token operator">=</span> trc<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ConfigMap</span><span class="token punctuation">(</span><span class="token class-name">TrafficMap</span> tmap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> tmap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>period<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> controller<span class="token punctuation">.</span><span class="token function">getAndClearCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> road <span class="token operator">=</span> controller<span class="token punctuation">.</span><span class="token function">readRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>road<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：我们发现Sensor含有的Controller和Reporter含有的map都有对应的set或者config方法，而不是在构造函数中一蹴而就，这给后续可能的扩展或者相应对象更换带来了便利</code></p><p><br><br><br>对TrafficMap进行分析，直接从代码入手。可以发现TrafficMap的主体是一个HashMap，也是一个”托盘”, 其对应的生产者是之前调用TrafficMap.put方法的TrafficReporter。其对应的消费者则是全局性管理的Manager（肯定会调用get）方法。<br>因此，TrafficMap也是一个公共资源，记得上锁。注意并不是总记录了所有的road信息，对于已经被读取完的road, 会被remove, put时进行重建或累加。请细细品味notify和wait的使用（前提是有锁才需要等待，故wait必须放在synchronized块里）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrafficMap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> traffic<span class="token punctuation">;</span>    <span class="token class-name">TrafficMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>traffic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> road<span class="token punctuation">,</span> <span class="token keyword">int</span> vcount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>road<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>traffic<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            traffic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>traffic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>vcount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"record added into map: (road "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">", vehicle passed count "</span><span class="token operator">+</span>traffic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>vcount<span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            traffic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>vcount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"record added into map: (road "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">", vehicle passed count "</span><span class="token operator">+</span>vcount<span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> road<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span> <span class="token punctuation">(</span>road<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>traffic<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Integer</span> t <span class="token operator">=</span> traffic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        traffic<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"record fetched from map: (road "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">", vehicle passed count "</span><span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br>Manager类作为一个单独的线程，独立地提取出map中的数据并做出后续可能的处理，如color等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrafficMap</span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> roadMAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                         <span class="token comment">// it's 1000 originally, determined by yourself</span>    <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token class-name">TrafficMap</span> tmap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> tmap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> roadMAX<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mgr received: (road: "</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token string">"vehicle passed count: "</span> <span class="token operator">+</span> count <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//roadColoring(r, count);</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>roadcolor我认为是和某些地图上一样对不同的拥堵段上色，这个属于额外功能，不是本章的重点，在这里就不实现了。我只实现了3条road，每条road2个lane的设计，如下所示。我并没有模拟不同路段的概率等，且由于sensor没有终止功能，程序会一直运行，此程序即为僵硬，笔者时间和水平有限，见谅</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrafficController</span><span class="token punctuation">></span></span> trafficControllers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TrafficReporter</span><span class="token punctuation">></span></span> trafficReporters<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TrafficMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TrafficController</span> trafficController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficController</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            trafficControllers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trafficController<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TrafficSensor</span> trafficSensor1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficSensor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trafficSensor1<span class="token punctuation">.</span><span class="token function">setObserver</span><span class="token punctuation">(</span>trafficController<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TrafficSensor</span> trafficSensor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficSensor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trafficSensor2<span class="token punctuation">.</span><span class="token function">setObserver</span><span class="token punctuation">(</span>trafficController<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> sensor1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>trafficSensor1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> sensor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>trafficSensor2<span class="token punctuation">)</span><span class="token punctuation">;</span>            sensor1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sensor2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TrafficReporter</span> trafficReporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficReporter</span><span class="token punctuation">(</span>trafficControllers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trafficReporters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trafficReporter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">trafficReporter<span class="token punctuation">.</span></span>ConfigMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>trafficReporter<span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Manager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结（省流版）</strong>：<br>该模型用到了<strong>两对</strong>生产者消费者模型，其中TrafficReporter既作为消费者不断掏空Controller中存储的数据，又作为生产者不断将数据put进map中，使得manager可以及时提取并做出全局性操作。设计两对的目的是将信息从每条lane上封装到road,再从road集中到map，设计极为巧妙，使用reporter进行过渡连接。不过<strong>观察者模式</strong>在这里体现得还没有那么突出，毕竟是一对一的调用。另外，sensor,reporter和manager三种线程之间sleep的间隔可以自由设置，互不干扰，实现了“并行化处理”。</p><p>在coding中，我们可以发现，对于多线程设计来说，最重要的就是保护临界资源。而对于本例和hw5中所使用的到<strong>生产者-消费者模式</strong>，需要上锁的临界区对象就是“托盘”，<strong>”托盘“类中一般附有两种public方法，一种是填入，一种是取出并清空，填入由生产者线程调用，取出并清空由消费者线程调用。使用的时候对这两种方法进行synchronized的简单上锁即可。</strong> 此外，由于存在清空操作，故取出的时候不要忘记判断isEmpty,如果容器为空，请进入wait状态，待存入时在结尾notifyAll进行提醒。<strong>在这个例子中，我们可以发现第一个托盘TrafficController里的容器vehicleCount是可变长无上限(如果有的话也是int的上限)有下限（0）的缓冲（临界）区，因此在放入时候不用考虑是否会放满而需要while(isFull){wait}, 清空的时候由于没有车辆通过时可以直接返回0，也不需要考虑是否取不出东西而while(isEmpty){wait}。 因此也就不存在notifyAll()的需要。而TrafficMap中的HashMap也是可变长无上限有下限(Empty)的容器，但是由于取出是通过remove进行的，故需要containsKey()预先进行判断，如果没有，表示用户现在需要获取这条道路的信息，等到对应road上的reporter将信息存入之后，再在Put方法的最好用notifyAll()唤醒该线程，使得其继续进行操作，这一点很重要，不应该被忘记。相应地get方法就不需要NotifyAll了</strong></p><p><br><br></p><h2 id="Hw5作业架构拙见"><a href="#Hw5作业架构拙见" class="headerlink" title="Hw5作业架构拙见"></a>Hw5作业架构拙见</h2><p>根据指导书中要求以及和输入输出接口的提示，我们发现读入的每一个乘客信息是我们生产和消费的基本单位。读入部分（乘客发出请求）是信息的生产者（生产线程），电梯（接受并处理乘客的需求）是消费者。而中间相应地也需要一个”托盘”来存放乘客请求信息，这就是指导书中建议的<strong>候乘表类</strong>。这里的结构与PPT案例中的reporter-map-manager的部分有些许类似，只不过那里是多个reporter,1个map,1个manager。此次作业是1个requestInputUnit,6个候乘表类,6个Elevator。</p><p>另外，对于消费的过程，其实当乘客上到电梯里就已经结束了，因为我们从候乘类表中让乘客进入电梯里就已经将候乘类表对应的容器进行了remove操作，这里在取出的时候可能需要判断,但是不能直接wait，否则电梯里有人的话电梯仍应该继续运行，wait另有其可能；但是存入的时候需要直接notifyAll()，让空闲电梯进入工作。</p><p>hw5难度其实并不在多线程设计<strong>生产者-消费者模型</strong>本身，而在于：</p><p>1个requestInputUnit到6个候乘表类的映射和选择，中间可以插入一个选择类进行分析。当然这部分也可以不做，直接%6轮流上即可,相信概率论的伟力 <del>（对于我这样水平中等的同学天天卷这方面非架构类的东西不如享受生活，毕竟还有很多比分数更重要的人和事）</del>。</p><p>电梯把乘客从候乘表类放到电梯内之后应该上下开门关门进入出入与否的调度，这里才是最难实现最容易出错的地方，坐等欣赏各位大佬各显神通。</p><h2 id="测试建议"><a href="#测试建议" class="headerlink" title="测试建议"></a>测试建议</h2><p>1.高频反向接人(测试strategy正确性)<br>2.大客流量一次性投入(测试电梯容纳上限6人正确性)<br>3.大客流量分批不同楼层投入(测试tle与否)<br>4.压线数据+大客流量投入(投入时间卡在50s)左右</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？希望本文能给同学们带来帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OO_unit1</title>
      <link href="/2023/02/21/OO-unit1/"/>
      <url>/2023/02/21/OO-unit1/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>面向过程的编程单位：函数</p><p>确定性的输入可以得到确定性的输出 != 相同的输入得到相同的输出</p><p>java只能单继承，但是可以多实现(implement)</p><p>String 是一个不可变对象，其相应的所有方法都是重新构造一个新的对象并指向它</p><p>编程习惯：如果写了有参构造，记得显式地写出无参构造</p><p>纪老师邮箱 <a href="mailto:&#53;&#x39;&#57;&#48;&#51;&#x38;&#57;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#53;&#x39;&#57;&#48;&#51;&#x38;&#57;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p><h1 id="OO-Unit1"><a href="#OO-Unit1" class="headerlink" title="OO-Unit1"></a>OO-Unit1</h1><h2 id="代码架构分析"><a href="#代码架构分析" class="headerlink" title="代码架构分析"></a>代码架构分析</h2><h2 id="homework1-无穷层括号嵌套也支持"><a href="#homework1-无穷层括号嵌套也支持" class="headerlink" title="homework1 (无穷层括号嵌套也支持)"></a>homework1 (无穷层括号嵌套也支持)</h2><pre><code>根据hw1的需求分析，我们可以将任务划分为三个部分：递归下降读入并构建表达式树；将表达式展开（去括号）；合并同类项与优化。以第三次作业架构画类图如下</code></pre><p><img src="https://img-community.csdnimg.cn/images/3a8ece16d8ad4b1b8a9486b40ac5ad44.png" alt="img" title="#left"></p><h3 id="一-递归下降读入并保存表达式"><a href="#一-递归下降读入并保存表达式" class="headerlink" title="一.递归下降读入并保存表达式"></a>一.递归下降读入并保存表达式</h3><h4 id="0-预处理"><a href="#0-预处理" class="headerlink" title="0.预处理"></a>0.预处理</h4><p>本设计中只进行了空白符的预处理，没有对正负符号进行分别的判断和处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">deleteEmpty</span><span class="token punctuation">(</span><span class="token class-name">String</span> raw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> raw<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>raw<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>raw<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-词法分析器Lexer"><a href="#1-词法分析器Lexer" class="headerlink" title="1.词法分析器Lexer"></a>1.词法分析器Lexer</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lexer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> input<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> curToken<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Lexer</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getTriFuc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"sincos"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>pos<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>pos<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            curToken <span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"sincos"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            curToken <span class="token operator">=</span> <span class="token function">getTriFuc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            pos <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            curToken <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>curToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charatPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>由于x,y,z均为len=1的变量，故处理起来十分方便，而数字可能是2位数及以上的，故需要专门的getNumber方法。curToken是我们目前读到的具有整体性意义的有效字符串，从Lexer的构造方法中可以看出，Lexer.next()方法是读取下一个有效字符串的方法，而pos指向的是待读入的下一个字符的位置。初始化时我们读了第一个整体性字符串，pos指向下一个待读取的字符。这里有两个地方值得引起注意：1.Lexer.next()中首先判断了pos的位置，如果pos到len处了，说明读入已经结束，返回即可。2.pos永远+=1,且没有出现在循环体中重复+不为1的值，即没有出现较大的跃度，这样可以使得代码美观，具有一致性，且不易出错（尤其是跳到越界处）。</code></pre><p><br><br><br><br><br></p><h4 id="2-解析器Parser"><a href="#2-解析器Parser" class="headerlink" title="2.解析器Parser"></a>2.解析器Parser</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lexer</span> lexer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Parser</span><span class="token punctuation">(</span><span class="token class-name">Lexer</span> lexer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lexer <span class="token operator">=</span> lexer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Expr</span> <span class="token function">parseExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Expr</span> expr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sign <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            expr<span class="token punctuation">.</span><span class="token function">addTerm</span><span class="token punctuation">(</span><span class="token function">parseTerm</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            expr<span class="token punctuation">.</span><span class="token function">addTerm</span><span class="token punctuation">(</span><span class="token function">parseTerm</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sign <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            expr<span class="token punctuation">.</span><span class="token function">addTerm</span><span class="token punctuation">(</span><span class="token function">parseTerm</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> expr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Term</span> <span class="token function">parseTerm</span><span class="token punctuation">(</span><span class="token class-name">String</span> sign<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Term</span> term <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            term<span class="token punctuation">.</span><span class="token function">addFactor</span><span class="token punctuation">(</span><span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> term<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Factor</span> <span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">paserPowExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ToolFuctions</span><span class="token punctuation">.</span><span class="token function">isVar</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">parserVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sin"</span><span class="token punctuation">)</span> <span class="token operator">||</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">parserTriFuc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"fgh"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">parserFuction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">parserDerivative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">parserInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Number</span> <span class="token function">parserInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sign <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> tempnum <span class="token operator">=</span> sign <span class="token operator">+</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>tempnum<span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BigInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Factor</span> <span class="token function">parserVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token keyword">var</span> <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">charatPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> lexer<span class="token punctuation">.</span><span class="token function">validpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> poly <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poly <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PowVar</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> poly<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PowVar</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Factor</span> <span class="token function">parserTriFuc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> kind <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读完sin/cos去读下一个</span>        lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读取完左括号</span>        <span class="token class-name">Factor</span> factor <span class="token operator">=</span> <span class="token function">parseFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行完之后peek已经是右括号</span>        lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去读取右括号的下一个内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">charatPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> lexer<span class="token punctuation">.</span><span class="token function">validpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> poly <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lexer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poly <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TriFuc</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> factor<span class="token punctuation">,</span> poly<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TriFuc</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span> factor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有做符号的预处理部分，读入可以保证绝对的方便和正确，但故对于正负号的判断比较复杂，在最初的设计中，除了Number可以带符号之外，只有Term有符号，且Term的符号)最终是由Term前面的符号(分析Expr时候得出的)和Term中Number的符号共同决定的，这样的方式很容易导致错误和处理的不一致。在后续的设计中，我取消了Number和Term的符号，选择直接加入一个值为-1的Number作为Term的factor,使得符号的设计具有一致性，起到解耦合的作用。</p><p><br><br><br>除term外，实现Factor的类型有：Expr(无幂次和符号属性),Number(数),PowVar(幂因子),PowExpr(表达式因子，由内容Expr和幂次pow组成，这个类是中间类，在降幂处理后就不存在了)</p><p>至此，我们实现了表达式树的构建。</p><h3 id="二-将带括号的表达式展开"><a href="#二-将带括号的表达式展开" class="headerlink" title="二.将带括号的表达式展开"></a>二.将带括号的表达式展开</h3><h4 id="1-消除PowExpr"><a href="#1-消除PowExpr" class="headerlink" title="1.消除PowExpr"></a>1.消除PowExpr</h4><pre><code>写出两个判断实例中容器是否满足所有子表达式项均&lt;=1的函数isLowerstPow(term or expr)。对于term的实例，遍历factors，如果factors中有ExprPoW,对ExprPoW进行拆分或剪枝优化(优化部分最后有介绍)，注意，这里要对ExprPow中的Expr进行彻底的深拷贝，否则会出现两个引用实例指向同一内存空间的错误；如果有Expr，进一步调用Expr的判断函数；对于Expr的判断函数则是遍历terms，调用terms的判断函数。</code></pre><h4 id="2-递归实现表达式乘法展开"><a href="#2-递归实现表达式乘法展开" class="headerlink" title="2.递归实现表达式乘法展开"></a>2.递归实现表达式乘法展开</h4><pre><code>对于最初的实现方式：如果是两个expr相乘，拆出各自expr中的每一个term，由两层循环遍历将两个term组合成一个新的term,放入待返回的新的expr中的terms里。如果只有一个expr,则将此expr的每个term添加上除它之外的其他term中的factors即可(仍需要深拷贝)。但是这样会造成问题，就是虽然括号得以展开，却会大量出现term中有且只有一个expr的情况，表达式树仍然不是最简的情况。类似于堆排序维护的DFS递归简化expr对目前所得到的所有Expr中的terms里的每一个Term进行分析，如果该Term中含有Expr，则该Term只含有一个Expr，没有其余factor，即Term。getfactors.size()==1 &amp;&amp; Term.getfactors.size().get(0) instanceof Expr==true；否则Term中含有的都是不属于Expr的最简单factor(常数和幂函数)。因此我们可以进行DFS递归来使得表达式树的层数不断下降至1(最简)。递归方式如下：首先写两个函数判断expr和term是否已经化至最简。对term来说，遍历factors,由之前分析可知，如果Term.getfactors.size()==1 &amp;&amp; Term.getfactors.size().get(0) instanceof Expr==true，即term中只含有一个expr的情况，这时候只需要把expr中terms的每一个都放入包含该term的Expr中的terms即可;而对于expr来说，遍历terms,如果出现包含expr的term，则递归调用上述化简term的函数。</code></pre><p><br><br></p><pre><code>在第二次上机之后获得启发后的改良：不管乘法的对象是几个expr，先new一个expr，最后返回此expr。首先遍历expr中的terms，对每一个term进行处理。对term的处理则是遍历factors的每一个factor,记录是否有expr。如果有则返回true并记录expr的下标；反之，返回false。如果函数中不存在expr的项，则深拷贝一份term,将其加入最开始new的expr中，返回此expr即可。否则，遍历factors,将之前找到的factors中的expr中的每一个term加上factors中的其余项(仍然需要深拷贝)。最后对该expr重复进行expr的去括号操作，最后返回一个terms中的每一个term不包含expr的表达式。最后返回第一层对expr的每一个term的处理，由于返回的都是expr，故只需要各个返回的expr合并即可。这样一来，我们便可以省去之前DFS递归简化expr的情况，因为每一次操作我们都合并了expr，就不会产生某个Term只包含expr的情况。</code></pre><p>至此，已经获得了一个性能不太好的正确结果。<br><br><br><br><br><br></p><h3 id="三-合并同类项与性能优化"><a href="#三-合并同类项与性能优化" class="headerlink" title="三.合并同类项与性能优化"></a>三.合并同类项与性能优化</h3><h4 id="基础优化"><a href="#基础优化" class="headerlink" title="基础优化"></a>基础优化</h4><h5 id="1-合并同类项"><a href="#1-合并同类项" class="headerlink" title="1.合并同类项"></a>1.合并同类项</h5><pre><code>新增一个类Item,属性包含系数coef,x,y,z的幂polyX,polyY,polyZ。遍历我们得到的初步正确答案(expr)，由递归下降部分可知，最终的expr里面的terms容器中的term中不含有属于expr类的factor。故我们可以根据加号和减号分隔开每一项(term)，并为它们每一个都实例化Item，并装入items容器(Arraylist即可)。最后遍历容器，可以写一个辅助函数判断xyz幂次是否完全相同，如果完全相同，则系数(coef)合并。</code></pre><h5 id="2-零一优化"><a href="#2-零一优化" class="headerlink" title="2.零一优化"></a>2.零一优化</h5><pre><code>对于每个Item,有如下几种情况。首先，系数为0，直接不输出。其次，xyz幂次均为0，此时只要输出系数即可；再次，判断系数绝对值是否为1.如果为1，则不输出系数，只输出符号。如果不为1，则输出系数。对于幂次的输出，按照xyz的顺序，如果未输出系数，则输出x * * n,反之，输出* x * * n。对于y,z同前，如果x幂次为0则不输出x，对于y而言同前，否则输出* y * * n。由于前面一直忽略了0，故最后结果如果为空串，输出0。</code></pre><p><br><br></p><h4 id="进阶优化"><a href="#进阶优化" class="headerlink" title="进阶优化"></a>进阶优化</h4><p>1.符号优化<br>   如果同时有+和-号，第一项输出+号项，但是无需输出+号；如果没有+号则不优化；如果只有+号，则只去掉第一项的+。</p><p>2.平方优化<br>    如果xyz有平方项，原本输出x * * 2改为x * x。<br><br><br></p><h4 id="剪枝优化"><a href="#剪枝优化" class="headerlink" title="剪枝优化"></a>剪枝优化</h4><pre><code>1.term中factors若含有0，直接找到该term所在的terms容器，移除term。如果有1则将1从factors里面移除。2.在降幂的时候如果有0次幂，直接new Num(1)取代。</code></pre><h2 id="homework2-增加自定义函数和三角函数"><a href="#homework2-增加自定义函数和三角函数" class="headerlink" title="homework2 (增加自定义函数和三角函数)"></a>homework2 (增加自定义函数和三角函数)</h2><pre><code>由于第一次已经实现了多重括号的支持，所以第二次作业相对来说任务不会太多。其实只有两个任务：1.把自定义函数转化成三角函数。2.把三角函数内部进行化简。我们首先进行第二个任务，默认自定义函数已经全部转化为了三角函数，具体原因暂时不介绍。这里只需要对三角函数内部进行讨论即可，如果不是expr，则我们不需要额外处理；如果是expr，我们只需要把三角函数内部的expr也看成这次作业的目标即可，在递归的时候对三角函数进行额外的instanceof讨论，然后将其内部的expr在递归时重新调用expr相关的处理方法即可。然后我们进行第一个任务，目前我们已经可以做到无自定义函数的正确处理，那对于自定义函数，我们只需要将传入的参数看作一个expr，再将其中的PowVar替换成对应的PowExpr即可(注意深拷贝)。具体实现是将我们目前实现的功能对自定义函数的表达式进行解析（这就解答了为什么我们先做第二个任务，因为自定义函数中不会递归调用自己）。生成表达式树之后将有关的PowVar替换成PowExpr，最后把自定义函数替换成expr因子，替换待计算表达式的自定义函数因子即可，第二次作业就这样也得到了初步完成。不考虑三角函数化简的情况下，化简同上。</code></pre><h2 id="homework3-增加导数和自定义函数的非递归相互调用"><a href="#homework3-增加导数和自定义函数的非递归相互调用" class="headerlink" title="homework3 (增加导数和自定义函数的非递归相互调用)"></a>homework3 (增加导数和自定义函数的非递归相互调用)</h2><pre><code>自定义函数的非递归相互调用部分十分简单，只需要按顺序执行即可。对于导数而言，由于只出现一次，所以我们只需要对求导函数进行一次处理即可。注意乘法公式和链式法则，注意深拷贝。</code></pre><h2 id="程序Bug"><a href="#程序Bug" class="headerlink" title="程序Bug"></a>程序Bug</h2><p>仅在第二次作业中优化三角函数时产生了sin(-x)缺少一层括号的失误。</p><h2 id="发现他人Bug的策略"><a href="#发现他人Bug的策略" class="headerlink" title="发现他人Bug的策略"></a>发现他人Bug的策略</h2><pre><code>1.联合测试    将各种类型的bug糅合在一起，常见的有：    为了优化三角函数括号层数导致sin(-x)没加括号。    为了优化x**2-&gt;x*x导致三件函数sin(x*x)没加括号    sin(0)**0,cos(0)**0,(表达式内为0)**0    复合函数求导2.使用评测机3.用自己在调试过程中产生过的hack点</code></pre><h2 id="程序性能与优缺点分析"><a href="#程序性能与优缺点分析" class="headerlink" title="程序性能与优缺点分析"></a>程序性能与优缺点分析</h2><p><img src="https://img-community.csdnimg.cn/images/d94929ae8f3e4998b893a47c5f94f0cf.png" alt="img" title="#left"></p><p><img src="https://img-community.csdnimg.cn/images/5cfddd0ca7f44177af81c1eeafbd0b47.png" alt="img" title="#left"></p><pre><code>方法之间的耦合度过高，Term类中的方法复杂度太大。有很多类都是中间类，最后不会得到保存。类的合并太少，每次迭代需要更新的代码量较大。此外，对于一些方法的递归调用使用了判断来保证结果的正确性，这会导致栈的深度十分难以接受，对性能影响极大，容易造成Memory out of bound或者TLE。</code></pre><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><pre><code>1.递归下降程序在编写的时候在expr层面都是比较容易的，具体落实到term或者factor的处理上才会有相对较大的代码量，因此对于每个功能的封装显得格外重要，不同功能之间应该避免过多的耦合，这样代码阅读和调试的难度会很大2.尽量使用评测机测出Bug,保证基本的正确分可以拿到，至于优化可以尽力而为。3.toString方法尽量不要去产生某些量的修改，否则debug时可能会自动调用导致一些意想不到的Bug4.注意深拷贝5.多看讨论区，以谦虚的姿态学习他人的代码思想和风格；在力所能及的情况下帮助他人debug</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fall_detection</title>
      <link href="/2023/01/31/fall-detection/"/>
      <url>/2023/01/31/fall-detection/</url>
      
        <content type="html"><![CDATA[<h1 id="基于python的跌倒识别的svm机器学习-model1（最初级版本）"><a href="#基于python的跌倒识别的svm机器学习-model1（最初级版本）" class="headerlink" title="基于python的跌倒识别的svm机器学习 model1（最初级版本）"></a>基于python的跌倒识别的svm机器学习 model1（最初级版本）</h1><p>代码包含五个py文件：data_disposal,get_feature,feature_extract,train,model_open</p><h2 id="数据处理与清洗部分"><a href="#数据处理与清洗部分" class="headerlink" title="数据处理与清洗部分"></a>数据处理与清洗部分</h2><h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><p>注明：本人使用的数据是.csv文件<br>客观数据包含：被测试人的身高，体重，年龄，性别<br>主要数据采集可从两方面进行入手，一方面是<strong>传感器的种类</strong>(Accelerometer,Gyroscope,Magnetometer)，另一方面是传感器<strong>佩戴的位置</strong>(RightPocket,Waist,Wrist,Ankle,Chest)<br>具体信息如图</p><p><img src="/2023/01/31/fall-detection/pic1.png" alt="pic1"></p><p><br><br></p><h3 id="数据处理方法"><a href="#数据处理方法" class="headerlink" title="数据处理方法:"></a>数据处理方法:</h3><p>将训练集二八划分，八成为训练集，两成为验证集</p><p>1.首先是<strong>data_disposal</strong>部分，将.csv文件里面的无关数据行剔除，只保留了图片中最下方以’;’隔开的数据，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osfolder <span class="token operator">=</span> <span class="token string">'./UMAFall_Dataset/'</span>   <span class="token comment"># my folder's path</span>dirs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>                              <span class="token comment"># for check</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>    filepath <span class="token operator">=</span> folder <span class="token operator">+</span> <span class="token builtin">file</span>                 <span class="token comment">#each file's path</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># read row by row, which is called line here</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_w<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"%"</span> <span class="token keyword">in</span> line <span class="token punctuation">:</span>    <span class="token comment"># if %, get rid of the uesless line</span>                <span class="token keyword">continue</span>            f_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用data_disposal对每一个Dataset中的数据进行预处理，直接运行即可</p><p><br><br></p><p>2.使用get_feature获取我需要的特征数据以便后续训练</p><p><strong>这里本人使用的思想是将sensor position的NO转化成不同的特征，避免重复传入sensor position,也避免不同的编号可能有大小之间的差异,导致训练器对不同身体部位的sensor有偏好</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> genfromtxtINF <span class="token operator">=</span> <span class="token number">1000000000</span>start <span class="token operator">=</span> <span class="token number">35</span><span class="token keyword">def</span> <span class="token function">Acc_data_extract</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># there is 5 position mentioned above</span>    max_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">]</span>    max_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">]</span>    max_z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">]</span>    <span class="token comment"># from the file's name to ensure the label,fall is 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Fall"</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        label <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        label <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># delimeter is ';'</span>    my_data <span class="token operator">=</span> genfromtxt<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">';'</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> row <span class="token keyword">in</span> my_data<span class="token punctuation">:</span>        <span class="token comment"># row[5] is the type of sensor, 0 for Accelerator</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                 <span class="token comment"># row[6] is the position of sensor</span>            index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment"># get the max value of the acceleration in x,y,z from various position(index) </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>max_x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                max_x<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>max_y<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                max_y<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>max_z<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                max_z<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#x,y,z is list, label is int</span>    <span class="token keyword">return</span> max_x<span class="token punctuation">,</span>max_y<span class="token punctuation">,</span>max_z<span class="token punctuation">,</span>label<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.feature_extract的介绍</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> get_feature<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># folder's path is parameter, so that we can deal with dataset and judgeset simultaneously </span><span class="token keyword">def</span> <span class="token function">feature</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">:</span>                   dirs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>    <span class="token comment"># initial,using the first data</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.8768832683563232</span><span class="token punctuation">,</span> <span class="token number">1.059326171875</span><span class="token punctuation">,</span> <span class="token number">1.0078125</span><span class="token punctuation">,</span> <span class="token number">4.048095703125</span><span class="token punctuation">,</span> <span class="token number">1.004150390625</span><span class="token punctuation">,</span>           <span class="token number">0.9856240749359131</span><span class="token punctuation">,</span><span class="token number">0.375</span><span class="token punctuation">,</span> <span class="token number">0.267333984375</span><span class="token punctuation">,</span> <span class="token number">2.31396484375</span><span class="token punctuation">,</span> <span class="token number">0.1005859375</span><span class="token punctuation">,</span>           <span class="token number">0.800494372844696</span><span class="token punctuation">,</span> <span class="token number">1.033447265625</span><span class="token punctuation">,</span> <span class="token number">0.7763671875</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">0.210205078125</span><span class="token punctuation">]</span>    res_feature <span class="token operator">=</span> <span class="token punctuation">[</span>res<span class="token punctuation">]</span>    res_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>        <span class="token comment">#each file's path</span>        filepath <span class="token operator">=</span> folder <span class="token operator">+</span> <span class="token builtin">file</span>        <span class="token comment">#x finally become a big list consisting of 15 elements(each 5 position in x,y,z)                 </span>        x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>label <span class="token operator">=</span> get_feature<span class="token punctuation">.</span>Acc_data_extract<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        x<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        x<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        <span class="token comment"># res_label is a list of label like [1,0,0,1...]</span>        res_label<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        <span class="token comment">#final is a ndarray which means [[],[],[]]</span>        final <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>        <span class="token comment">#absorb the new ndarray(matrix) of 15*1 by row </span>        res_feature <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res_feature<span class="token punctuation">,</span>values<span class="token operator">=</span>final<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># return two ndarray that can be trained by svm</span>    <span class="token comment"># actually there is no need to use np.array here</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>res_feature<span class="token punctuation">)</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>res_label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br><br><br><br><br></p><h3 id="svm分类器训练和参数调节"><a href="#svm分类器训练和参数调节" class="headerlink" title="svm分类器训练和参数调节"></a>svm分类器训练和参数调节</h3><p>之前对数据进行了一系列整理之后我们才可以用sklearn提供的库函数进行训练,对应的train模块如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> get_feature<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> svm<span class="token keyword">import</span> feature_extract<span class="token keyword">import</span> os<span class="token keyword">import</span> pickleX<span class="token punctuation">,</span>y <span class="token operator">=</span> feature_extract<span class="token punctuation">.</span>feature<span class="token punctuation">(</span><span class="token string">'./UMAFall_Dataset/'</span><span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token comment">#kernel,C and max_iter have all been tested and it's the  possible best result</span>svc <span class="token operator">=</span> svm<span class="token punctuation">.</span>SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">1.25</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>max_iter<span class="token operator">=</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment"># judge_set test to ensure the hit rate</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>hit <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># open the files in judge set</span>judgeset_path <span class="token operator">=</span> <span class="token string">'./UMAFall_Judgeset/'</span>dirs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>judgeset_path<span class="token punctuation">)</span><span class="token comment">#count the accuracy</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    filepath <span class="token operator">=</span> judgeset_path <span class="token operator">+</span> <span class="token builtin">file</span>  <span class="token comment"># each file's path</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token operator">=</span> get_feature<span class="token punctuation">.</span>Acc_data_extract<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    res <span class="token operator">=</span> svc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span> hit <span class="token operator">+=</span><span class="token number">1</span>    <span class="token comment"># else: print(file)</span>hit_rate <span class="token operator">=</span> hit<span class="token operator">/</span><span class="token builtin">sum</span><span class="token keyword">print</span><span class="token punctuation">(</span>hit_rate<span class="token punctuation">)</span><span class="token comment"># store the model</span>s<span class="token operator">=</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>svc<span class="token punctuation">)</span><span class="token comment"># wb+ is necessary,svm.model is its name</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'svm.model'</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Done\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，我们就不需要每次都重复训练，而是将我们得到的模型保存起来，成为一个.model文件，相应地，每次调用这个model我们也要有相应的读取功能model_open，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> get_feature<span class="token keyword">import</span> os<span class="token comment"># just copy</span>f2<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'svm.model'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>s2<span class="token operator">=</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>model1<span class="token operator">=</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>hit <span class="token operator">=</span> <span class="token number">0</span>judgeset_path <span class="token operator">=</span> <span class="token string">'./UMAFall_Judgeset/'</span>dirs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>judgeset_path<span class="token punctuation">)</span><span class="token comment">#count the accuracy like above</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    filepath <span class="token operator">=</span> judgeset_path <span class="token operator">+</span> <span class="token builtin">file</span>  <span class="token comment"># each file's path</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token operator">=</span> get_feature<span class="token punctuation">.</span>Acc_data_extract<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    res <span class="token operator">=</span> model1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span> hit <span class="token operator">+=</span><span class="token number">1</span>    <span class="token comment"># else: print(file)</span>hit_rate <span class="token operator">=</span> hit<span class="token operator">/</span><span class="token builtin">sum</span><span class="token keyword">print</span><span class="token punctuation">(</span>hit_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><strong>最后结果如下图</strong></p><p><img src="/2023/01/31/fall-detection/pic2.png" alt="pic2"><br><br><br><br><br><br><br><strong>正确率如下图</strong></p><p><img src="/2023/01/31/fall-detection/pic3.png" alt="pic3"></p><p>约为<strong>84.2%</strong>,为本人目前在不同参数中获得的最优值<br><br><br></p><p>未成功识别judge set中数据如下，可能后续需要hard code<br>UMAFall_Subject_18_ADL_LyingDown_OnABed 2个</p><p>UMAFall_Subject_18_ADL_Hopping 7个</p><p>UMAFall_Subject_18_ADL_Jogging 7个</p><p>UMAFall_Subject_18_Fall_backwardFall 5个</p><p>UMAFall_Subject_18_Fall_forwardFall 4个</p><p>UMAFall_Subject_19_Fall_lateralFall 7个<br><br><br><br><br><br></p><h3 id="缺陷和改进方向"><a href="#缺陷和改进方向" class="headerlink" title="缺陷和改进方向"></a>缺陷和改进方向</h3><p><strong>缺陷</strong></p><p>1.数据没有被完全使用，由于给训练提供的参数数量越大，训练时间越长，且尚不清楚最终成果可以采集到的数据有哪些，本人目前只使用了Accelerator在x,y,z不同方向上的数据，另外两个sensor的数据目前没有使用，对应get_feature.py中row[5]的不同值。</p><p>2.没有利用统计规律对数据处理，如筛出不合理数据，对数据进行标准化等等，可能会受到单位的影响，如m/s和cm/s</p><p>3.训练参数缺乏合理性，由于本人编程技术和数理基础水平的限制和简化问题的需要，目前只取用了accelerator的x,y,z方向上的最大值作为是否摔倒的阈值，对于是否需要再取用身高体重等参数尚不确定，是否是越多越好呢？</p><p>4.代码可扩展性和鲁棒性较差，目前仅仅是为了训练模型而写出来</p><p>5.时间参数没有纳入考虑范围，可能会丢失部分有效信息<br><br><br></p><p><strong>改进方向</strong></p><p>1.无脑增加参数，将其他两个sensor也纳入考虑范围</p><p>2.初步处理数据时取平均值和方差，用(x-x平均值)/根号下x的方差</p><p>3.从实际情况出发，明确前端，数据库和训练模型之间的接口，对可用参数进行搜集，重新训练模型</p><h3 id="项目目前存在的的问题"><a href="#项目目前存在的的问题" class="headerlink" title="项目目前存在的的问题"></a>项目目前存在的的问题</h3><p>1.如何将目前得到的model如何嵌入并运用到微信小程序上去</p><p>2.实际收集的时候有哪些数据是可以被搜集的目前尚不确定，能否采集到智能设备中Accelerometer,Gyroscope,Magnetometer三个sensor的数据？如果可以采集，单位是否一致？如果不能采集，又将怎么处理？怎么重新训练模型？</p><p>3.如何应用数据库存储，在实践上实现对应的功能</p><p>4.准确率是否存在不足，还有一些功能如判断周围设备是否有同样的行为尚未完善，报警机制单一，无反馈，容易出现漏报和误报的情况。</p><p>5.数据库的隐私问题，立项书中介绍使用某差分方法进行信息保护，尚未解决</p><p>6.三个分工之间进度差距大，接口尚未明确，尚不清楚如何做出可在实际生活中运行的实物，没有明确的方向，需要进一步制定计划</p>]]></content>
      
      
      <categories>
          
          <category> Machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svm , data disposal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/12/30/Sorting/"/>
      <url>/2022/12/30/Sorting/</url>
      
        <content type="html"><![CDATA[<h1 id="普通的排序算法（平均时间复杂度为O-n-2-）"><a href="#普通的排序算法（平均时间复杂度为O-n-2-）" class="headerlink" title="普通的排序算法（平均时间复杂度为O(n^2^)）"></a>普通的排序算法（平均时间复杂度为O(n^2^)）</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>先上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>插入排序和打牌一样，手里的牌是有序的，抓到的牌放到合适的位置使之有序即可。<br>第一个if是保证代码的robustness,让代码更加健壮，这是一个很好的习惯。第一个for循环中i的位置是记录已经排序好的位置末尾的后一个待插入元素。i的初始值为1，因为第0个元素在最开始独立出现的时候就是排好序的（一共就一个元素，不需要排序了）。i不断增大的过程就是有序量增加的过程，标志着算法的进程加深。<br>第二个for循环中j的初始位置是i-1，也就是排好序的最后一个元素。在j–的过程中，相邻两个元素发生交换（通过swap函数实现数组元素的交换），直至arr[j]&lt;=arr[j+1]。<br><code>注意：这里的swap函数用了异或写法，目的是位运算加快速度并且节省temp的空间。平凡写法是创建一个temp变量作为中间人交换，a=a+b;b=a-b;a=a-b;也受到和异或一样的问题困扰。问题在于，如果某种排序算法中有a[i]和a[i]自己交换，则千万不可以用异或的方式，因为这会使得a[i]变成0,也就是说使用异或交换的时候，两个待交换的变量的内存不能是同一片地址。</code><br>*《算法导论》中对插入排序中第二个for循环实现略有不同，但本质一样，书中是用一个key变量保存了arr[i]，然后j=i-1;如果arr[j]&gt;key&amp;&amp;j&gt;=0,则arr[j+1]=arr[j];也就是不断地把数组元素往后移，直到arr[j]&lt;=key,最后把key放入arr[j+1],因为此时j+1的位置是“空的”（准确地说是和arr[j+2]相等，是无效信息)。本质无异。*<br><br><br><br>我还想说明一点，关于第一个for循环i的值的范围，有的地方是取头不取尾，有的地方取尾不取头，这个其实是根据循环不变量确定的。插入排序的循环不变量就是0到i-1都保持有序，并不是0到i-1都是其最终位置。所以i从1开始，并且要取到最末尾。而像选择排序则不同，选择排序选出最大或最小值之后那个值就是确定的，以最小值为例，i应该从0开始，循环条件为i &lt; arr.length-1,去掉末尾，因为前面都取到对应位置，最后一个元素自然也就在它自己的位置上。<br><br><br><br><br><br><br><br><br></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><strong>先上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>顾名思义，选择排序是每次选一个最小的数字，放到i的位置。有了插入排序算法详细的介绍和剧透，选择排序显得很简单。<br>i是记录待排序的位置，循环不变量是0到i-1都是排序好的从小到大的。<br>这里i从0到<strong>小于</strong>arr.length-1在上面已经解释过。minIndex记录最小的值的下标，minIndex的初始值是i，一个个往后比较，如果有比arr[i]小的值则更新minIndex的值，然后交换。注意，这里minIndex有可能等于i，也就是说可能是swap(arr,i,i),根据之前的解释，这里就不能用异或swap。<br><br><br><br><br><br><br><br><br></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>代码如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Bubblesort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Boolean</span> flag<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> swap <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>冒泡排序的核心思想是相邻两两交换使得最大数字到最后面去。冒泡这里外层for循环i从array.length-1开始，到1结束（i&gt;0)，原因是i其实是执行次数，为了让其含有更多信息，我们让i为待排序的位置，每次都确定一个最大的数字，i递减。<br>第二层for循环则是从0开始到i-1两两比较，如果前比后大则交换。<br>我还设了一个flag的布尔类型变量，意为当某一轮比较发现没有前比后大的情况说明排序已完成。开始设为false，如果产生比较则设为true，如果没有则还是false,在第二层循环结束后判定flag的值并且维护flag为false。<br><br><br><br><br><br><br><br><br></p><h1 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>先上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">==</span><span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token class-name">L</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token class-name">L</span><span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Merge</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> p1<span class="token operator">=</span>l<span class="token punctuation">;</span>      <span class="token keyword">int</span> p2<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> p2<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">:</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>help<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          arr<span class="token punctuation">[</span>l<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">=</span>help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>归并排序利用的是分治思想，把数组一分为二，分别递归排序后通过merge算法合并。<br>注意：我写的Mergesort存在方法重载，第一个Mergesort是保证Mergesort接口的简洁性和鲁棒性，第二个Mergesort是具体的分治递归；最后通过Merge函数，在辅助数组help的帮助下合并两个数组，可见归并排序需要额外空间，不是原址的。<br><code>这里求mid的时候是mid=L+((R-L)&gt;&gt;1);结果自然是精确的，好处是不会溢出因为L+R溢出，而且位运算更快</code><br>PS:归并排序还可以用于在nlogn时间复杂度内求逆序对和小和，我会在后面的博客中更新。但是这些代码需要略微进行修改。<br><br><br><br><br><br></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><strong>先上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Heapsort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">bulid_heap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bulid_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> maxIndex<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">&lt;</span>len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               maxIndex<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token keyword">else</span><span class="token punctuation">&#123;</span>               <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>               i<span class="token operator">=</span>maxIndex<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>使用大顶（根）堆，通过建堆和维护最大堆的性质使得arr[0]永远是数组中最大的数字，每次将0和最后一个数字交换，并且把堆的长度缩小一个单位，并且维护最大堆的性质，如此往复，最后可以得到从小到大排序的数组。<br>swap从怂起见还是用temp为好，我个人用异或结果最后将arr[0]和arr[0]自身交换，导致第一个数字总是0，最后改写循环终止条件到arr[1]才解决问题。<br>heapify是自上而下的过程，注意判断终止条件，i<em>2+1如果超过了堆的长度（小心，堆的长度不一定是数组的长度，所以函数参数表中还有len）i</em>2+2就更无从谈起，这说明i是叶节点。值得注意的是，如果产生交换，i要移到被交换的那个下一个位置，也就是maxIndex的位置，如果i自己最大，则直接跳出，说明已经完成大顶堆性质的维护。这个过程可以用递归，代码会更简洁易懂，但是我认为直接while更好。<br>build_heap函数是初始化建立大顶堆的过程，《算法导论》指出，只要从第一个不是叶节点的元素开始维护大顶堆的性质即可，自下而上建堆。由于left=i<em>2+1,right=i</em>2+2,所以父节点是(i-1)/2,我们只要从最后一个元素的父节点开始，逐个递减地往上建堆即可。即(arr.length-2)&gt;&gt;1。</p><p>下面是左神的代码，他考虑了一个个给出数字的情况，额外添加了heapInsert函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>index <span class="token operator">=</span> largest<span class="token punctuation">;</span>left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>heapInsert值得解释，虽然它和heapify是相同性质，但由于父节点只有一个，子节点却有两个，所以形式上heapInsert会简单很多，注意：heapInsert的终止条件是index等于0或者arr[index]小于等于arr[(index-1)/2]，左神只写了一句while(arr[index] &gt; arr[(index - 1) / 2]),包括后者，其实也包括了前者，因为index=0的时候，(index-1)/2也为0（java中的除法是取整除法，1.5-&gt;1,-1.5-&gt;-1），非常精妙。</p><p><br><br><br><br><br></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>先导问题:荷兰国旗问题。<br>1.简单版：将一个数组排序，使得&lt;k的值在左侧的连续一片，其他的值在数组右侧。<br>2.升级版：将一个数组排序，使得&lt;k的值在左侧的连续一片，==k的值在数组中间的连续一片，&gt;k的值在数组的右边。（像荷兰的国旗一样三个不同颜色，其实法国国旗更贴切）<br>直接上升级版问题的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flagsort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mark1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mark2<span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>mark2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">,</span><span class="token operator">++</span>mark1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">--</span>mark2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>mark1是小于k的边界的下标，mark2是大于k的边界的下标。我们所做的事情就是遍历数组，如果arr[i]小于k则将其与小于k的边界的后面一个元素交换，并且维护mark1的值。如果是等于k，就直接继续遍历，如果大于k，则将arr[i]与大于k的边界的前面一个元素交换，但是注意i不能++，即不继续遍历，因为交换过来的元素我们尚不清除它和k的大小关系。<br>注意两件事：<br>1.swap函数不能用异或，因为会有重复地址的可能。<br>2.mark1或者2的边界是包括对应性质的边界，边界外的不包括其对应性质。</p><p>为了和让快排用上我们的函数接口，左神把函数修改了一下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> less <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> more <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们能得到返回的两个下标，表示边界的情况，还能对数组分块处理（参数列表中有l,r）。<br><br><br><br><br><br><br>快速排序就是选定一个数组中的k值交换到数组末尾（一般直接选取最后一个元素），然后将剩余部分排序，把k与大于k的边界的值交换即可达到分治目的。如果分类方法采取荷兰国旗问题的非升级版（这样的我们称之为1.0快排），当选取的k有很多出现的时候，算法就会比较慢，因为升级版问题（2.0快排）把等于k的值也分块排好，这样我们分治的范围就更小了（这就是为什么要返回一个两个元素的数组标记边界的位置）。<br>当然，我们还嫌这样不够，众所周知（我最近才知道）即使是2.0快排的最差情况排序时间复杂度仍然是O(n^2^),因为如果对于一个有序数组（如1 2 3 4 5 6 7 8 9），我们每次都选取最后一个元素，通过国旗问题算法分块事件复杂度是O(n),但是我们的分治并没有起到作用，我们的子问题是变成了对1到8排序，如此下来，就变成了O(n^2^)。<br>核心问题是我们每次都选取最后一个数字作为k会遇到难受的问题，解决方法是随便选k，通过概率模型将算法的统计学意义上的时间复杂度降低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> less <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> more <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> more<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Math.random()可以生成[0,1)之间的等概率的数（计算机上等概率，不是数学上的等概率，因为计算机精度有限）。可以通过l+(int)(Math.random()*(r-l+1))等概率地取得l到r之间的任意一个整数。其余比较基础，注意递归条件是r&gt;l，不要反过来写（r==l则return之类的），因为过程中可能出现l&lt;r，比如对开头的2，2，2，排序，l=0,mark1=-1,最后返回的r是-1&lt;0。</p><p><br><br><br><br><br></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>先上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellsort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">>></span><span class="token number">1</span> <span class="token punctuation">;</span>gap<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> gap<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">>=</span>gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">-=</span>gap <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">-</span>gap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法分析：<br>每次只对gap间隔的数组元素进行排序，如长度为10的数组gap=3时对下标为{0，3，6，9}和{1，4，7}以及{2，5，8}的三个子数组分别进行排序，然后二分缩小gap的值。<br>第一个循环就是对gap的值进行控制的总循环，注意gap初始值取arr.length/2即可，因为arr.length只有0满足，不需要排序。<br>第二个和第三个循环合起来保证相同gap下的不同数组排序好，我的代码中使用的是插入排序完成此过程，因为插入排序对我个人而言比较好理解，每一个新的元素在插入排序的过程中都能找到自己在子数组中目前的正确相对位置。所以不需要重复考虑，i从gap开始遍历数组，j从i开始不断和j-gap比较并且交换，j再以gap为公差递减至gap。最里层的循环保证了子数组当前的有序性，倒数第二层的循环保证了完备性。注意i,j的初始值和j的终止条件。也可以通过冒泡完成，但是那个我理解不太了。<br>如下是C语言实现shellsort并通过冒泡排序实现子数组排序的代码。<br><img src="https://img-blog.csdnimg.cn/332a4e10a1d142dc9bdcba66cd76d793.png" alt="在这里插入图片描述"><br><br><br><br><br><br></p><h1 id="桶排序思想下的排序（不基于比较）"><a href="#桶排序思想下的排序（不基于比较）" class="headerlink" title="桶排序思想下的排序（不基于比较）"></a>桶排序思想下的排序（不基于比较）</h1><p>桶排序思想是一种不基于比较的排序，使用情况和数据状况有关。</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>以空间换时间，适用于数据范围较窄的数据状况。如某地区人的年龄。<br>其本质是一种哈希，只不过哈希函数是本身，广义上来说只要哈希函数保证两个数的相对顺序不变（哈希函数离散地单调递增）即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>               record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           help<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> help<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为左神代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br><br></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>数据能用进制表示，这里我们用十进制举例。<br>先将待排序元素处理成相同位数，即找到最高位数字，其余数字高位不足的补零。<br>有十个桶子，每个桶分别对应0,1,2……9。先考虑每个待排序元素的第一位（个位），从左往右依次放入个位数字对应的桶中。然后将其按照顺序从0号桶到9号桶倒出，同一个桶内的元素按队列处理，即先进先出，后进后出（FIFO）。然后考虑第二位（十位），重复上面操作。<br>算法分析：<br>由于最高位最后考虑，故最高位优先级最高。而先进先出原则没有违反同一个位数下的已经排好序部分的次序。所以算法是正确的，但是要准备这么多桶子总是很麻烦，我们采用等效的优化方式实现。<br>下面是左神的代码，我肯定现在写不出这么好的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">maxbits</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token operator">++</span><span class="token punctuation">;</span>max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> digit<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">>=</span> begin<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>bucket<span class="token punctuation">[</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不得不感慨一句这个函数的封装要做好，我们不妨从getDigit函数开始分析，d是要得到的位数，x是待取位数的数字对象。x除以10的d-1次方，就可以让小数点前移d-1次，最后留下待取的数字为个位数。如果超过由于整数除法就直接为0（之前说高位不足补0），这里直接用pow函数取int就可以实现，我觉得很神奇，不过也算是学到了。最后记得模10取个位。<br>再分析maxbit函数，先通过遍历找出数组中最大的数字。然后不断除10直到为0，逻辑上res先++再max除10。</p><p>radixSort是核心部分，记录下一个常变量radix表示基底（进制）先建立一个bucket数组存放出桶的数字，大小和待排序数字元素个数相同。由于数字最高有几位就出入桶几次，所以最外层的d的for循环就是总的操作次数，并且d记录了目前操作的位数信息，即第几位。再建立一个count数组，数组大小和进制相等，如10进制就10个，意义对应0到9。然后遍历arr中待排序元素，分别取第d位的数字然后放入count中。再另起一个for循环对count进行处理，处理之后的结果是count[i]表示&lt;=i的元素个数，这样求前缀和的方式让count数组实现了对bucket的分块，我们后面就会体现出来。<br>然后注意从右往左遍历arr数组，此时我们默认arr数组在d-1位及以前都是有序排列好的（循环不变量）。取出第i个元素的d位数字j，对应到count数组中的count[j]。把arr[i]填入bucket的第count[j]位置，也就是bucket[count[j] - 1] = arr[i];然后维护count[j]的值。这样的操作能使得出桶完成。然后将桶中的元素分别按顺序赋值给arr。</p><p>正确性分析：count起到了对bucket分段的作用，比如j为3，count[3]=5,现在从右往左遍历arr，会优先把j=3的d-1位及以内的更大的数字填入count[3]对应的位置（bucket[5-1]）。然后维护count[3]的值，因为下一个j==3的数字进来就要往左边靠了。重要的是这样不会影响j&lt;3和j&gt;3的值分块的正确性，j&lt;=3无需置疑，count[3]–不会影响小于等于1或2的个数。而j=4或者更大的数字也不会受到影响，因为count[3]–的含义只是那个位置被占据，并不影响小于等于3的个数。所以分片正确性不变。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The use of Command</title>
      <link href="/2022/12/30/The-use-of-Command/"/>
      <url>/2022/12/30/The-use-of-Command/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-常用快捷键"><a href="#windows-常用快捷键" class="headerlink" title="windows 常用快捷键"></a>windows 常用快捷键</h1><p><strong>1.ctrl+c  复制</strong><br><strong>2.ctrl+v  粘贴</strong><br><strong>3.ctrl+a  全选</strong><br><strong>4.ctrl+t   剪切</strong><br><strong>5.ctrl+z  撤回</strong><br>6.ctrl+f 查找<br><strong>7.ctrl+s 保存</strong><br>8.ctrl+h 替换<br>9.alt+f4 关闭窗口<br>10.shift+delete(键盘右下角数字部分0右边的一个点) 永久删除<br><strong>11.Windows+r 运行（可以用于打开cmd命令窗口）</strong><br><strong>12.Windows+e 打开我的电脑</strong><br><strong>13.Windows+shift+s 给屏幕截图</strong><br>14.最下方任务栏（下图）点右键可选中并打开任务管理器<br><img src="https://img-blog.csdnimg.cn/7a57337c0e894555b8c92db6db0a5efd.png" alt="在这里插入图片描述"><br><em>也可以用ctrl+shift+esc打开任务管理器</em></p><h1 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h1><p><del>CMD都打不开你学个P，先打开吧</del></p><h2 id="CMD-打开方式"><a href="#CMD-打开方式" class="headerlink" title="CMD 打开方式"></a>CMD 打开方式</h2><ol><li>点左下角windows图表+windows系统+命令提示符</li><li><strong>WINDOWS+R+输入cmd</strong></li><li>在桌面空白处或者文件夹空白处摁住shift点鼠标右键，选择打开powershell(或者摁s键)</li><li><img src="https://img-blog.csdnimg.cn/3a115e9f4cb54e08871090276ed7c1b5.png" alt="在这里插入图片描述"><br>点击空白处，在地址栏前面写cmd+<kbd>space</kbd>+路径+回车</li></ol><p><em>以管理员方式运行</em>：windows系统+命令提示符+右键+更多+以管理员……<img src="https://img-blog.csdnimg.cn/d636aed568c546a99a95b0ca360e244f.png#pic_center" alt="在这里插入图片描述"><br><strong>或者右键点击左下角windows再选以管理员身份运行powershell.</strong></p><h2 id="常用的Dos命令"><a href="#常用的Dos命令" class="headerlink" title="常用的Dos命令"></a>常用的Dos命令</h2><p><code>1.盘符切换</code> <img src="https://img-blog.csdnimg.cn/60248d248daf47789938fe292c383588.png" alt="在这里插入图片描述"><br><strong>注意C后面的:必须是英文</strong></p><p><code>2.查看当前目录下的所有文件</code><br><img src="https://img-blog.csdnimg.cn/355f4bf05563473388d7df08e664a247.png#pic_center" alt="在这里插入图片描述"><br><strong>dir即可</strong> dir意为dirctory（目录）</p><p><code>3.切换目录</code><br><img src="https://img-blog.csdnimg.cn/0431947a7b95410092bea2e142423d22.png#pic_center" alt="在这里插入图片描述"><br>cd 意为change directory 切换目录<br><strong>直接cd只能进入cd目录内的文件，如D后面cd java(注意中间有空格)</strong></p><p><strong>cd /d 可以在同级目录或者硬盘间之间切换（注意/d是正斜杠且cd与它之间有空格,而且后面要跟硬盘名称和冒号，==冒号千万不可少==）</strong></p><p><strong>cd . .意为返回根目录(注意cd和两个点之间可以有空格但两个点之间不能有空格)</strong></p><p><code>4.清理屏幕</code><br><strong>cls+回车</strong><br>cls意为clear screen</p><p><code>5.退出终端</code><br><strong>exit+回车</strong></p><p><code>6.查看电脑IP</code><br><strong>ipconfig+回车</strong><br><img src="https://img-blog.csdnimg.cn/21464e26f7cf40efa3a38c962df9766c.png#pic_center" alt="在这里插入图片描述"></p><p><code>7.打开一些应用</code><br><strong>计算器：calc+回车</strong><br><strong>画图：mspaint+回车</strong><br><strong>记事本：notepad+回车(此时还没有保存，ctrl+s后会向你确认保存在哪里)</strong></p><p><code>8.ping一个网址</code><br><em><strong>注意在命令行里面粘贴最好不要ctrl+c或者v因为可能会推出，单机鼠标右键就是粘贴</strong></em></p><p>ping+<kbd>space</kbd>+网页地址+回车<br><img src="https://img-blog.csdnimg.cn/bfac8425e7d143f0baf231eb4a333a6a.png#pic_center" alt="在这里插入图片描述"><br><code>9.创建一个新的文件夹或者文件</code><br><img src="https://img-blog.csdnimg.cn/14d691630d644ba2a8d2985c648d6bb1.png" alt="在这里插入图片描述"><br>此处我选择了桌面<br><strong>创建文件夹：md+<kbd>space</kbd>+文件夹名字</strong><br><strong>创建文件：先cd到文件夹，回车，再在下一行cd+<kbd>></kbd>+文件夹名字(带文件扩展名如.txt)</strong></p><p><code>10.文件的删除</code><br><strong>若要删除文件夹，先要删除其中的内容再删文件，否则会有目录不为空的警告且删除失败</strong><br><strong>删除文件：del+<kbd>space</kbd>+文件名</strong><br><strong>删除文件夹：rd+<kbd>space</kbd>+文件名</strong>            <em>这里r是remove的意思</em><br><img src="https://img-blog.csdnimg.cn/5eea107b39014f328194f11d9d17e572.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 电脑技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown有关语法</title>
      <link href="/2022/12/30/The-use-of-MarkDown/"/>
      <url>/2022/12/30/The-use-of-MarkDown/</url>
      
        <content type="html"><![CDATA[<p>本文为从CSDN的教学中分离出来的教程<br>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。（这里写的好像没有什么用）</p><h2 id="CSDN的自吹时间"><a href="#CSDN的自吹时间" class="headerlink" title="CSDN的自吹时间"></a>CSDN的自吹时间</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<a href="%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)">^1</a></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd><br>注意这里<kbd>圆边矩形</kbd>好像是圆边矩形框框。<br>圆边矩形的写法是&lt;&gt;里面加kbd再接&lt;/&gt;,/后面加kbd。</p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。（两个英文的<kbd>`</kbd>之间的东西会被红色标注，这个点是和波浪线一起的，效果如上面的TOC）</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p>n个连续的#后面加<kbd>space</kbd>是n级大纲(标题)</p><p><em>强调文本</em> <em>强调文本</em>     在两个*或_之间</p><p><strong>加粗文本</strong> <strong>加粗文本</strong>   在上面的基础上两边各多一个符号  </p><p>==标记文本==  两对等号</p><p><del>删除文本</del>  两对波浪号</p><blockquote><p>引用文本     一个大于号</p></blockquote><p>H<del>2</del>O is是液体。 两个波浪号之间的数字是下标</p><p>2^10^ 运算结果是 1024. 两个^之间是上标</p><p>C^2^<del>5</del> 这个可能不是特别好看就是说</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.<br><a href="https://blog.csdn.net/godlikegu?spm=1000.2115.3001.5343">顾哥的博客</a>.<br>[]＋(),     []里面是名称,()里面是超链接<br>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"><br>!+[]+(),!是英文的，[]里面是图片显示失败的之后名字，()里面是图片地址。<br>比如<img src alt="图片失败后的名称"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =50x30)<br>超链接后面+<kbd>space</kbd>+<kbd>=</kbd>+<kbd>宽</kbd>+<kbd>x（就是小写的x英文字母）</kbd>+<kbd>高</kbd></p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"><br>井号#紧跟图片链接后面加pic_center</p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p><p>先#pic_center+<kbd>space</kbd>+宽x高</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// An highlighted block</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>三个连续的`开头，结束时也要，头三个点后面写语言类型</p><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><p>英文减号就是黑色圆点（无序表头）</p><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><p>直接1.就是有序表头</p><ol><li>项目1   </li><li>项目2</li><li>项目3<br><kbd>-</kbd>+<kbd>space</kbd>+<kbd>[]</kbd>+<kbd>任务名</kbd>+<kbd>space</kbd>是任务box，[]里只加x（大小写均可）就是打勾。</li></ol><ul><li>[] mission</li><li><input disabled type="checkbox"> 计划任务</li><li><input checked disabled type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>|——–|———–|<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |</p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>冒号后面还要加至少一个space<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<a href="%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A">^2</a></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p> Markdown将文本转换为 HTML。<br>*[Markdown]:    语言<br>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08        进行中               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d        计划一               <span class="token operator">:</span>         des3, after des2, 5d        计划二               <span class="token operator">:</span>         des4, after des3, 5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>张三 <span class="token arrow operator">->></span> 李四<span class="token operator">:</span> 你好！李四, 最近怎么样?李四<span class="token arrow operator">-->></span>王五<span class="token operator">:</span> 你最近怎么样，王五？李四<span class="token arrow operator">--x</span> 张三<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">-x</span> 王五<span class="token operator">:</span> 我很好，谢谢!<span class="token keyword">Note right of</span> 王五<span class="token operator">:</span> 李四想了很长时间, 文字太长了&lt;br/>不适合放在一行.李四<span class="token arrow operator">-->></span>张三<span class="token operator">:</span> 打量着王五...张三<span class="token arrow operator">->></span>王五<span class="token operator">:</span> 很好... 王五, 你怎么样?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将产生一个流程图。:</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[长方形]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">链接</span> <span class="token arrow operator">--></span></span> B<span class="token text string">((圆))</span>A <span class="token arrow operator">--></span> C<span class="token text string">(圆角长方形)</span>B <span class="token arrow operator">--></span> D<span class="token text string">&#123;菱形&#125;</span>C <span class="token arrow operator">--></span> D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchatst=>start<span class="token operator">:</span> 开始e=>end<span class="token operator">:</span> 结束op=>operation<span class="token operator">:</span> 我的操作cond=>condition<span class="token operator">:</span> 确认？st<span class="token arrow operator">-></span>op<span class="token arrow operator">-></span>condcond<span class="token text string">(yes)</span>->econd<span class="token text string">(no)</span>->op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My second post</title>
      <link href="/2022/12/29/My-second-post/"/>
      <url>/2022/12/29/My-second-post/</url>
      
        <content type="html"><![CDATA[<p>My girlfriend treats me very well</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
